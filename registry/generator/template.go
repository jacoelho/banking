package generator

const validateCountryTmpl = `// Code generated by banking/generator; DO NOT EDIT.

package {{ .PackageName }}

import (
    "fmt"
	"strings"

    "github.com/jacoelho/banking/ascii"
)

func {{ .FunctionValidate }}(iban string) error {
    if len(iban) != {{ .Length }} {
        return fmt.Errorf("unexpected length, want: {{ .Length }}: %w", ErrValidation)
    }
    {{ range .Rules }}
    if subject := iban[{{ .StartPos }}:{{ .EndPos }}]; {{ rule . "subject" }} {
        return fmt.Errorf("{{ .String }}, found %s: %w", subject, ErrValidation)
    }
    {{ end }}
	if c := Checksum(iban); c != iban[2:4] {
		return fmt.Errorf("incorrect checksum: %w", ErrValidation)
	}

    return nil
}

func {{ .FunctionGenerate }}() string {
	var sb = new(strings.Builder)

	{{- range .Rules }}
    {{ generator . "sb" -}}
    {{ end }}

	return ReplaceChecksum(sb.String())
}
`

const validateTmpl = `// Code generated by banking/generator; DO NOT EDIT.

package {{ .PackageName }}

import (
    "fmt"
)

func Validate(iban string) error {
    if len(iban) < 2 {
        return fmt.Errorf("unexpected length: %w", ErrValidation)
    }
	
	code := iban[0:2]
	switch code {
    {{- range .Functions }}
    case "{{ .Code }}":
		return {{ .Fn }}(iban)
    {{- end }}

	default:
		return fmt.Errorf("%s is not supported: %w", code, ErrValidation)
	}
}
`

const generateTmpl = `// Code generated by banking/generator; DO NOT EDIT.

package {{ .PackageName }}

import (
    "fmt"
)

func Generate(countryCode string) (string, error) {
	var result string

	switch countryCode {
    {{- range .Functions }}
    case "{{ .Code }}":
		result = {{ .Fn }}()
    {{- end }}

	default:
		return "", fmt.Errorf("%s is not supported: %w", countryCode, ErrValidation)
	}

	return result, nil
}
`
