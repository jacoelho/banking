// Code generated by banking/registry; DO NOT EDIT.

package iban

import (
	"fmt"

	"github.com/jacoelho/banking/ascii"
	"github.com/jacoelho/banking/pool"
)

// validateBosniaAndHerzegovinaIBAN validates Bosnia And Herzegovina IBAN
func validateBosniaAndHerzegovinaIBAN(iban string) error {
	if len(iban) != 20 {
		return fmt.Errorf("unexpected length, want: 20: %w", ErrValidation)
	}

	if subject := iban[0:2]; subject != "BA" {
		return fmt.Errorf("static value rule, pos: 0, expected value: BA, found %s: %w", subject, ErrValidation)
	}

	if subject := iban[2:20]; !ascii.Every(subject, ascii.IsDigit) {
		return fmt.Errorf("range rule, start pos: 2, length: 18, expected type Digit, found %s: %w", subject, ErrValidation)
	}

	if c := Checksum(iban); c != iban[2:4] {
		return fmt.Errorf("incorrect checksum: %w", ErrValidation)
	}

	return nil
}

// generateBosniaAndHerzegovinaIBAN generates Bosnia And Herzegovina IBAN
func generateBosniaAndHerzegovinaIBAN() string {
	sb := pool.BytesPool.Get()
	defer sb.Free()

	sb.WriteString("BA")
	ascii.Digits(sb, 18)

	return replaceChecksum(sb.String())
}

// getBosniaAndHerzegovinaBBAN retrieves BBAN structure from Bosnia And Herzegovina IBAN
func getBosniaAndHerzegovinaBBAN(iban string) (BBAN, error) {
	if len(iban) != 20 {
		return BBAN{}, fmt.Errorf("unexpected length, want: 20: %w", ErrValidation)
	}

	return BBAN{
		BBAN:             iban[4:20],
		BankCode:         iban[4:7],
		BranchCode:       iban[7:10],
		NationalChecksum: iban[18:20],
		AccountNumber:    iban[10:18],
	}, nil
}
