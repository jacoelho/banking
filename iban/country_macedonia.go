// Code generated by banking/registry; DO NOT EDIT.

package iban

import (
	"github.com/jacoelho/banking/pool"
	"github.com/jacoelho/banking/ascii"
)
// validateMacedoniaIBAN validates Macedonia IBAN
func validateMacedoniaIBAN(iban string) error {
	if len(iban) != 19 {
		return &ErrValidationLength{Expected: 19, Actual: len(iban)}
	}
	if subject := iban[0:2]; subject != "MK" {
		return &ErrValidationStaticValue{Position: 0, Expected: "MK", Actual: subject}
	}
	if subject := iban[2:7]; !ascii.IsDigit(subject) {
		return &ErrValidationRange{Position: 2, Length: 5, Expected: CharacterTypeDigit, Actual: subject}
	}
	if subject := iban[7:17]; !ascii.IsAlphaNumeric(subject) {
		return &ErrValidationRange{Position: 7, Length: 10, Expected: CharacterTypeAlphaNumeric, Actual: subject}
	}
	if subject := iban[17:19]; !ascii.IsDigit(subject) {
		return &ErrValidationRange{Position: 17, Length: 2, Expected: CharacterTypeDigit, Actual: subject}
	}
	if c := checksum(iban); c != iban[2:4] {
		return &ErrValidationChecksum{Expected: c, Actual: iban[2:4]}
	}
	return nil
}
// generateMacedoniaIBAN generates Macedonia IBAN
func generateMacedoniaIBAN() (string, error) {
	sb := pool.BytesPool.Get()
	defer sb.Free()
	sb.WriteString("MK")
	ascii.Digits(sb, 5)
	ascii.AlphaNumeric(sb, 10)
	ascii.Digits(sb, 2)
	return ReplaceChecksum(sb.String())
}
// getMacedoniaBBAN retrieves BBAN structure from Macedonia IBAN
func getMacedoniaBBAN(iban string) (BBAN, error) {
	if len(iban) != 19 {
		return BBAN{}, &ErrValidationLength{Expected: 19, Actual: len(iban)}
	}
	return BBAN{BBAN: iban[4:19], BankCode: iban[4:7], BranchCode: "", NationalChecksum: iban[17:19], AccountNumber: iban[7:17]}, nil
}
