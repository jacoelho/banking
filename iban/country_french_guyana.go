// Code generated by banking/registry; DO NOT EDIT.

package iban

import (
	"github.com/jacoelho/banking/pool"
	"github.com/jacoelho/banking/ascii"
)
// validateFrenchGuyanaIBAN validates French Guyana IBAN
func validateFrenchGuyanaIBAN(iban string) error {
	if len(iban) != 27 {
		return &ErrValidationLength{Expected: 27, Actual: len(iban)}
	}
	if subject := iban[0:2]; subject != "GF" {
		return &ErrValidationStaticValue{Position: 0, Expected: "GF", Actual: subject}
	}
	if subject := iban[2:14]; !ascii.IsDigit(subject) {
		return &ErrValidationRange{Position: 2, Length: 12, Expected: CharacterTypeDigit, Actual: subject}
	}
	if subject := iban[14:25]; !ascii.IsAlphaNumeric(subject) {
		return &ErrValidationRange{Position: 14, Length: 11, Expected: CharacterTypeAlphaNumeric, Actual: subject}
	}
	if subject := iban[25:27]; !ascii.IsDigit(subject) {
		return &ErrValidationRange{Position: 25, Length: 2, Expected: CharacterTypeDigit, Actual: subject}
	}
	if c := checksum(iban); c != iban[2:4] {
		return &ErrValidationChecksum{Expected: c, Actual: iban[2:4]}
	}
	return nil
}
// generateFrenchGuyanaIBAN generates French Guyana IBAN
func generateFrenchGuyanaIBAN() (string, error) {
	sb := pool.BytesPool.Get()
	defer sb.Free()
	sb.WriteString("GF")
	ascii.Digits(sb, 12)
	ascii.AlphaNumeric(sb, 11)
	ascii.Digits(sb, 2)
	return ReplaceChecksum(sb.String())
}
// getFrenchGuyanaBBAN retrieves BBAN structure from French Guyana IBAN
func getFrenchGuyanaBBAN(iban string) (BBAN, error) {
	if len(iban) != 27 {
		return BBAN{}, &ErrValidationLength{Expected: 27, Actual: len(iban)}
	}
	return BBAN{BBAN: iban[4:27], BankCode: iban[4:9], BranchCode: iban[9:14], NationalChecksum: iban[25:27], AccountNumber: iban[14:25]}, nil
}
