// Code generated by banking/registry; DO NOT EDIT.

package iban

import (
	"github.com/jacoelho/banking/pool"
	"github.com/jacoelho/banking/ascii"
)
// validatePortugalIBAN validates Portugal IBAN
func validatePortugalIBAN(iban string) error {
	if len(iban) != 25 {
		return &ErrValidationLength{Expected: 25, Actual: len(iban)}
	}
	if subject := iban[0:2]; subject != "PT" {
		return &ErrValidationStaticValue{Position: 0, Expected: "PT", Actual: subject}
	}
	if subject := iban[2:25]; !ascii.IsDigit(subject) {
		return &ErrValidationRange{Position: 2, Length: 23, Expected: CharacterTypeDigit, Actual: subject}
	}
	if c := checksum(iban); c != iban[2:4] {
		return &ErrValidationChecksum{Expected: c, Actual: iban[2:4]}
	}
	return nil
}
// generatePortugalIBAN generates Portugal IBAN
func generatePortugalIBAN() (string, error) {
	sb := pool.BytesPool.Get()
	defer sb.Free()
	sb.WriteString("PT")
	ascii.Digits(sb, 23)
	return ReplaceChecksum(sb.String())
}
// getPortugalBBAN retrieves BBAN structure from Portugal IBAN
func getPortugalBBAN(iban string) (BBAN, error) {
	if len(iban) != 25 {
		return BBAN{}, &ErrValidationLength{Expected: 25, Actual: len(iban)}
	}
	return BBAN{BBAN: iban[4:25], BankCode: iban[4:8], BranchCode: iban[8:12], NationalChecksum: iban[23:25], AccountNumber: iban[12:23]}, nil
}
