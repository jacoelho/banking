// Code generated by banking/registry; DO NOT EDIT.

package iban

import (
	"github.com/jacoelho/banking/pool"
	"github.com/jacoelho/banking/ascii"
)
// validateBritishVirginIslandsIBAN validates British Virgin Islands IBAN
func validateBritishVirginIslandsIBAN(iban string) error {
	if len(iban) != 24 {
		return &ErrValidationLength{Expected: 24, Actual: len(iban)}
	}
	if subject := iban[0:2]; subject != "VG" {
		return &ErrValidationStaticValue{Position: 0, Expected: "VG", Actual: subject}
	}
	if subject := iban[2:4]; !ascii.IsDigit(subject) {
		return &ErrValidationRange{Position: 2, Length: 2, Expected: CharacterTypeDigit, Actual: subject}
	}
	if subject := iban[4:8]; !ascii.IsUpperCase(subject) {
		return &ErrValidationRange{Position: 4, Length: 4, Expected: CharacterTypeUpperCase, Actual: subject}
	}
	if subject := iban[8:24]; !ascii.IsDigit(subject) {
		return &ErrValidationRange{Position: 8, Length: 16, Expected: CharacterTypeDigit, Actual: subject}
	}
	if c := checksum(iban); c != iban[2:4] {
		return &ErrValidationChecksum{Expected: c, Actual: iban[2:4]}
	}
	return nil
}
// generateBritishVirginIslandsIBAN generates British Virgin Islands IBAN
func generateBritishVirginIslandsIBAN() (string, error) {
	sb := pool.BytesPool.Get()
	defer sb.Free()
	sb.WriteString("VG")
	ascii.Digits(sb, 2)
	ascii.UpperCaseLetters(sb, 4)
	ascii.Digits(sb, 16)
	return ReplaceChecksum(sb.String())
}
// getBritishVirginIslandsBBAN retrieves BBAN structure from British Virgin Islands IBAN
func getBritishVirginIslandsBBAN(iban string) (BBAN, error) {
	if len(iban) != 24 {
		return BBAN{}, &ErrValidationLength{Expected: 24, Actual: len(iban)}
	}
	return BBAN{BBAN: iban[4:24], BankCode: iban[4:8], BranchCode: "", NationalChecksum: "", AccountNumber: iban[8:24]}, nil
}
