// Code generated by banking/registry; DO NOT EDIT.

package iban

import (
	"github.com/jacoelho/banking/pool"
	"github.com/jacoelho/banking/ascii"
)
// validateRussiaIBAN validates Russia IBAN
func validateRussiaIBAN(iban string) error {
	if len(iban) != 33 {
		return &ErrValidationLength{Expected: 33, Actual: len(iban)}
	}
	if subject := iban[0:2]; subject != "RU" {
		return &ErrValidationStaticValue{Position: 0, Expected: "RU", Actual: subject}
	}
	if subject := iban[2:18]; !ascii.IsDigit(subject) {
		return &ErrValidationRange{Position: 2, Length: 16, Expected: CharacterTypeDigit, Actual: subject}
	}
	if subject := iban[18:33]; !ascii.IsAlphaNumeric(subject) {
		return &ErrValidationRange{Position: 18, Length: 15, Expected: CharacterTypeAlphaNumeric, Actual: subject}
	}
	if c := checksum(iban); c != iban[2:4] {
		return &ErrValidationChecksum{Expected: c, Actual: iban[2:4]}
	}
	return nil
}
// generateRussiaIBAN generates Russia IBAN
func generateRussiaIBAN() (string, error) {
	sb := pool.BytesPool.Get()
	defer sb.Free()
	sb.WriteString("RU")
	ascii.Digits(sb, 16)
	ascii.AlphaNumeric(sb, 15)
	return ReplaceChecksum(sb.String())
}
// getRussiaBBAN retrieves BBAN structure from Russia IBAN
func getRussiaBBAN(iban string) (BBAN, error) {
	if len(iban) != 33 {
		return BBAN{}, &ErrValidationLength{Expected: 33, Actual: len(iban)}
	}
	return BBAN{BBAN: iban[4:33], BankCode: iban[4:13], BranchCode: iban[13:18], NationalChecksum: "", AccountNumber: iban[18:33]}, nil
}
