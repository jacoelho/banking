// Code generated by banking/generator; DO NOT EDIT.

package iban

import (
	"fmt"

	"github.com/jacoelho/banking/ascii"
	"github.com/jacoelho/banking/pool"
)

// validateEstoniaIBAN validates Estonia IBAN
func validateEstoniaIBAN(iban string) error {
	if len(iban) != 20 {
		return fmt.Errorf("unexpected length, want: 20: %w", ErrValidation)
	}

	if subject := iban[0:2]; subject != "EE" {
		return fmt.Errorf("static value rule, pos: 0, expected value: EE, found %s: %w", subject, ErrValidation)
	}

	if subject := iban[2:20]; !ascii.Every(subject, ascii.IsDigit) {
		return fmt.Errorf("range rule, start pos: 2, length: 18, expected type Digit, found %s: %w", subject, ErrValidation)
	}

	if c := Checksum(iban); c != iban[2:4] {
		return fmt.Errorf("incorrect checksum: %w", ErrValidation)
	}

	return nil
}

// generateEstoniaIBAN generates Estonia IBAN
func generateEstoniaIBAN() string {
	sb := pool.BytesPool.Get()
	defer sb.Free()

	sb.WriteString("EE")
	generator.Digits(sb, 18)

	return ReplaceChecksum(sb.String())
}

// getEstoniaBBAN retrieves BBAN structure from Estonia IBAN
func getEstoniaBBAN(iban string) (BBAN, error) {
	if len(iban) != 20 {
		return BBAN{}, fmt.Errorf("unexpected length, want: 20: %w", ErrValidation)
	}

	return BBAN{
		BBAN:             iban[4:20],
		BankCode:         iban[4:6],
		BranchCode:       "",
		NationalChecksum: iban[19:20],
		AccountNumber:    iban[6:19],
	}, nil
}
