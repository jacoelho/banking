// Code generated by banking/generator; DO NOT EDIT.

package iban

import (
	"fmt"
	"strings"

	"github.com/jacoelho/banking/ascii"
)

func ValidateSaoTomeAndPrincipeIBAN(iban string) error {
	if len(iban) != 25 {
		return fmt.Errorf("unexpected length, want: 25: %w", ErrValidation)
	}

	if subject := iban[0:2]; subject != "ST" {
		return fmt.Errorf("static value rule, pos: 0, expected value: ST, found %s: %w", subject, ErrValidation)
	}

	if subject := iban[2:4]; !ascii.Every(subject, ascii.IsDigit) {
		return fmt.Errorf("range rule, start pos: 2, length: 2, expected type Digit, found %s: %w", subject, ErrValidation)
	}

	if subject := iban[4:12]; !ascii.Every(subject, ascii.IsDigit) {
		return fmt.Errorf("range rule, start pos: 4, length: 8, expected type Digit, found %s: %w", subject, ErrValidation)
	}

	if subject := iban[12:23]; !ascii.Every(subject, ascii.IsDigit) {
		return fmt.Errorf("range rule, start pos: 12, length: 11, expected type Digit, found %s: %w", subject, ErrValidation)
	}

	if subject := iban[23:25]; !ascii.Every(subject, ascii.IsDigit) {
		return fmt.Errorf("range rule, start pos: 23, length: 2, expected type Digit, found %s: %w", subject, ErrValidation)
	}

	if c := Checksum(iban); c != iban[2:4] {
		return fmt.Errorf("incorrect checksum: %w", ErrValidation)
	}

	return nil
}

func GenerateSaoTomeAndPrincipeIBAN() string {
	var sb = new(strings.Builder)
	sb.WriteString("ST")
	generator.Digits(sb, 2)
	generator.Digits(sb, 8)
	generator.Digits(sb, 11)
	generator.Digits(sb, 2)

	return ReplaceChecksum(sb.String())
}
