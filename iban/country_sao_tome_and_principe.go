// Code generated by banking/generator; DO NOT EDIT.

package iban

import (
	"fmt"

	"github.com/jacoelho/banking/ascii"
	"github.com/jacoelho/banking/pool"
)

// validateSaoTomeAndPrincipeIBAN validates Sao Tome And Principe IBAN
func validateSaoTomeAndPrincipeIBAN(iban string) error {
	if len(iban) != 25 {
		return fmt.Errorf("unexpected length, want: 25: %w", ErrValidation)
	}

	if subject := iban[0:2]; subject != "ST" {
		return fmt.Errorf("static value rule, pos: 0, expected value: ST, found %s: %w", subject, ErrValidation)
	}

	if subject := iban[2:25]; !ascii.Every(subject, ascii.IsDigit) {
		return fmt.Errorf("range rule, start pos: 2, length: 23, expected type Digit, found %s: %w", subject, ErrValidation)
	}

	if c := checksum(iban); c != iban[2:4] {
		return fmt.Errorf("incorrect checksum: %w", ErrValidation)
	}

	return nil
}

// generateSaoTomeAndPrincipeIBAN generates Sao Tome And Principe IBAN
func generateSaoTomeAndPrincipeIBAN() string {
	sb := pool.BytesPool.Get()
	defer sb.Free()

	sb.WriteString("ST")
	generator.Digits(sb, 23)

	return replaceChecksum(sb.String())
}

// getSaoTomeAndPrincipeBBAN retrieves BBAN structure from Sao Tome And Principe IBAN
func getSaoTomeAndPrincipeBBAN(iban string) (BBAN, error) {
	if len(iban) != 25 {
		return BBAN{}, fmt.Errorf("unexpected length, want: 25: %w", ErrValidation)
	}

	return BBAN{
		BBAN:             iban[4:25],
		BankCode:         iban[4:8],
		BranchCode:       iban[8:12],
		NationalChecksum: "",
		AccountNumber:    iban[12:25],
	}, nil
}
