// Code generated by banking/registry; DO NOT EDIT.

package iban

import (
	"github.com/jacoelho/banking/pool"
	"github.com/jacoelho/banking/ascii"
)
// validateLebanonIBAN validates Lebanon IBAN
func validateLebanonIBAN(iban string) error {
	if len(iban) != 28 {
		return &ErrValidationLength{Expected: 28, Actual: len(iban)}
	}
	if subject := iban[0:2]; subject != "LB" {
		return &ErrValidationStaticValue{Position: 0, Expected: "LB", Actual: subject}
	}
	if subject := iban[2:8]; !ascii.IsDigit(subject) {
		return &ErrValidationRange{Position: 2, Length: 6, Expected: CharacterTypeDigit, Actual: subject}
	}
	if subject := iban[8:28]; !ascii.IsAlphaNumeric(subject) {
		return &ErrValidationRange{Position: 8, Length: 20, Expected: CharacterTypeAlphaNumeric, Actual: subject}
	}
	if c := checksum(iban); c != iban[2:4] {
		return &ErrValidationChecksum{Expected: c, Actual: iban[2:4]}
	}
	return nil
}
// generateLebanonIBAN generates Lebanon IBAN
func generateLebanonIBAN() (string, error) {
	sb := pool.BytesPool.Get()
	defer sb.Free()
	sb.WriteString("LB")
	ascii.Digits(sb, 6)
	ascii.AlphaNumeric(sb, 20)
	return ReplaceChecksum(sb.String())
}
// getLebanonBBAN retrieves BBAN structure from Lebanon IBAN
func getLebanonBBAN(iban string) (BBAN, error) {
	if len(iban) != 28 {
		return BBAN{}, &ErrValidationLength{Expected: 28, Actual: len(iban)}
	}
	return BBAN{BBAN: iban[4:28], BankCode: iban[4:8], BranchCode: "", NationalChecksum: "", AccountNumber: iban[8:28]}, nil
}
