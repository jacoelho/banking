// Code generated by banking/registry; DO NOT EDIT.

package iban

import (
	"github.com/jacoelho/banking/pool"
	"github.com/jacoelho/banking/ascii"
)
// validateHungaryIBAN validates Hungary IBAN
func validateHungaryIBAN(iban string) error {
	if len(iban) != 28 {
		return &ErrValidationLength{Expected: 28, Actual: len(iban)}
	}
	if subject := iban[0:2]; subject != "HU" {
		return &ErrValidationStaticValue{Position: 0, Expected: "HU", Actual: subject}
	}
	if subject := iban[2:28]; !ascii.IsDigit(subject) {
		return &ErrValidationRange{Position: 2, Length: 26, Expected: CharacterTypeDigit, Actual: subject}
	}
	if c := checksum(iban); c != iban[2:4] {
		return &ErrValidationChecksum{Expected: c, Actual: iban[2:4]}
	}
	return nil
}
// generateHungaryIBAN generates Hungary IBAN
func generateHungaryIBAN() (string, error) {
	sb := pool.BytesPool.Get()
	defer sb.Free()
	sb.WriteString("HU")
	ascii.Digits(sb, 26)
	return ReplaceChecksum(sb.String())
}
// getHungaryBBAN retrieves BBAN structure from Hungary IBAN
func getHungaryBBAN(iban string) (BBAN, error) {
	if len(iban) != 28 {
		return BBAN{}, &ErrValidationLength{Expected: 28, Actual: len(iban)}
	}
	return BBAN{BBAN: iban[4:28], BankCode: iban[4:7], BranchCode: iban[7:12], NationalChecksum: iban[27:28], AccountNumber: iban[12:27]}, nil
}
