// Code generated by banking/registry; DO NOT EDIT.

package iban

import (
	"fmt"
	"github.com/jacoelho/banking/ascii"
	"github.com/jacoelho/banking/pool"
)

// validateBulgariaIBAN validates Bulgaria IBAN
func validateBulgariaIBAN(iban string) error {
	if len(iban) != 22 {
		return fmt.Errorf("unexpected length, want: 22: %w", ErrValidation)
	}
	if subject := iban[0:2]; subject != "BG" {
		return fmt.Errorf("static value rule, pos: 0, expected value: BG, found %s: %w", subject, ErrValidation)
	}
	if subject := iban[2:4]; !ascii.IsDigit(subject) {
		return fmt.Errorf("range rule, start pos: 2, length: 2, expected type Digit, found %s: %w", subject, ErrValidation)
	}
	if subject := iban[4:8]; !ascii.IsUpperCase(subject) {
		return fmt.Errorf("range rule, start pos: 4, length: 4, expected type UpperCaseLetters, found %s: %w", subject, ErrValidation)
	}
	if subject := iban[8:14]; !ascii.IsDigit(subject) {
		return fmt.Errorf("range rule, start pos: 8, length: 6, expected type Digit, found %s: %w", subject, ErrValidation)
	}
	if subject := iban[14:22]; !ascii.IsAlphaNumeric(subject) {
		return fmt.Errorf("range rule, start pos: 14, length: 8, expected type AlphaNumeric, found %s: %w", subject, ErrValidation)
	}
	if c := checksum(iban); c != iban[2:4] {
		return fmt.Errorf("incorrect checksum: %w", ErrValidation)
	}
	return nil
}

// generateBulgariaIBAN generates Bulgaria IBAN
func generateBulgariaIBAN() (string, error) {
	sb := pool.BytesPool.Get()
	defer sb.Free()
	sb.WriteString("BG")
	ascii.Digits(sb, 2)
	ascii.UpperCaseLetters(sb, 4)
	ascii.Digits(sb, 6)
	ascii.AlphaNumeric(sb, 8)
	return ReplaceChecksum(sb.String())
}

// getBulgariaBBAN retrieves BBAN structure from Bulgaria IBAN
func getBulgariaBBAN(iban string) (BBAN, error) {
	if len(iban) != 22 {
		return BBAN{}, fmt.Errorf("unexpected length, want: 22: %w", ErrValidation)
	}
	return BBAN{BBAN: iban[4:22], BankCode: iban[4:8], BranchCode: iban[8:12], NationalChecksum: "", AccountNumber: iban[12:22]}, nil
}
