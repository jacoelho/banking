// Code generated by banking/generator; DO NOT EDIT.

package iban

import (
	"fmt"

	"github.com/jacoelho/banking/ascii"
	"github.com/jacoelho/banking/pool"
)

// ValidateCroatiaIBAN validates Croatia IBAN
func ValidateCroatiaIBAN(iban string) error {
	if len(iban) != 21 {
		return fmt.Errorf("unexpected length, want: 21: %w", ErrValidation)
	}

	if subject := iban[0:2]; subject != "HR" {
		return fmt.Errorf("static value rule, pos: 0, expected value: HR, found %s: %w", subject, ErrValidation)
	}

	if subject := iban[2:21]; !ascii.Every(subject, ascii.IsDigit) {
		return fmt.Errorf("range rule, start pos: 2, length: 19, expected type Digit, found %s: %w", subject, ErrValidation)
	}

	if c := Checksum(iban); c != iban[2:4] {
		return fmt.Errorf("incorrect checksum: %w", ErrValidation)
	}

	return nil
}

// GenerateCroatiaIBAN generates Croatia IBAN
func GenerateCroatiaIBAN() string {
	sb := pool.BytesPool.Get()
	defer sb.Free()

	sb.WriteString("HR")
	generator.Digits(sb, 19)

	return ReplaceChecksum(sb.String())
}
