// Code generated by banking/registry; DO NOT EDIT.

package iban

import (
	"github.com/jacoelho/banking/pool"
	"github.com/jacoelho/banking/ascii"
)
// validateCroatiaIBAN validates Croatia IBAN
func validateCroatiaIBAN(iban string) error {
	if len(iban) != 21 {
		return &ErrValidationLength{Expected: 21, Actual: len(iban)}
	}
	if subject := iban[0:2]; subject != "HR" {
		return &ErrValidationStaticValue{Position: 0, Expected: "HR", Actual: subject}
	}
	if subject := iban[2:21]; !ascii.IsDigit(subject) {
		return &ErrValidationRange{Position: 2, Length: 19, Expected: CharacterTypeDigit, Actual: subject}
	}
	if c := checksum(iban); c != iban[2:4] {
		return &ErrValidationChecksum{Expected: c, Actual: iban[2:4]}
	}
	return nil
}
// generateCroatiaIBAN generates Croatia IBAN
func generateCroatiaIBAN() (string, error) {
	sb := pool.BytesPool.Get()
	defer sb.Free()
	sb.WriteString("HR")
	ascii.Digits(sb, 19)
	return ReplaceChecksum(sb.String())
}
// getCroatiaBBAN retrieves BBAN structure from Croatia IBAN
func getCroatiaBBAN(iban string) (BBAN, error) {
	if len(iban) != 21 {
		return BBAN{}, &ErrValidationLength{Expected: 21, Actual: len(iban)}
	}
	return BBAN{BBAN: iban[4:21], BankCode: iban[4:11], BranchCode: "", NationalChecksum: "", AccountNumber: iban[11:21]}, nil
}
