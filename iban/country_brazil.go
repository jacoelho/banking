// Code generated by banking/registry; DO NOT EDIT.

package iban

import (
	"github.com/jacoelho/banking/pool"
	"github.com/jacoelho/banking/ascii"
)
// validateBrazilIBAN validates Brazil IBAN
func validateBrazilIBAN(iban string) error {
	if len(iban) != 29 {
		return &ErrValidationLength{Expected: 29, Actual: len(iban)}
	}
	if subject := iban[0:2]; subject != "BR" {
		return &ErrValidationStaticValue{Position: 0, Expected: "BR", Actual: subject}
	}
	if subject := iban[2:27]; !ascii.IsDigit(subject) {
		return &ErrValidationRange{Position: 2, Length: 25, Expected: CharacterTypeDigit, Actual: subject}
	}
	if subject := iban[27:28]; !ascii.IsUpperCase(subject) {
		return &ErrValidationRange{Position: 27, Length: 1, Expected: CharacterTypeUpperCase, Actual: subject}
	}
	if subject := iban[28:29]; !ascii.IsAlphaNumeric(subject) {
		return &ErrValidationRange{Position: 28, Length: 1, Expected: CharacterTypeAlphaNumeric, Actual: subject}
	}
	if c := checksum(iban); c != iban[2:4] {
		return &ErrValidationChecksum{Expected: c, Actual: iban[2:4]}
	}
	return nil
}
// generateBrazilIBAN generates Brazil IBAN
func generateBrazilIBAN() (string, error) {
	sb := pool.BytesPool.Get()
	defer sb.Free()
	sb.WriteString("BR")
	ascii.Digits(sb, 25)
	ascii.UpperCaseLetters(sb, 1)
	ascii.AlphaNumeric(sb, 1)
	return ReplaceChecksum(sb.String())
}
// getBrazilBBAN retrieves BBAN structure from Brazil IBAN
func getBrazilBBAN(iban string) (BBAN, error) {
	if len(iban) != 29 {
		return BBAN{}, &ErrValidationLength{Expected: 29, Actual: len(iban)}
	}
	return BBAN{BBAN: iban[4:29], BankCode: iban[4:12], BranchCode: iban[12:17], NationalChecksum: "", AccountNumber: iban[17:29]}, nil
}
