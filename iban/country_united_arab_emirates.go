// Code generated by banking/registry; DO NOT EDIT.

package iban

import (
	"fmt"
	"github.com/jacoelho/banking/ascii"
	"github.com/jacoelho/banking/pool"
)

// validateUnitedArabEmiratesIBAN validates United Arab Emirates IBAN
func validateUnitedArabEmiratesIBAN(iban string) error {
	if len(iban) != 23 {
		return fmt.Errorf("unexpected length, want: 23: %w", ErrValidation)
	}

	if subject := iban[0:2]; subject != "AE" {
		return fmt.Errorf("static value rule, pos: 0, expected value: AE, found %s: %w", subject, ErrValidation)
	}

	if subject := iban[2:23]; !ascii.IsDigit(subject) {
		return fmt.Errorf("range rule, start pos: 2, length: 21, expected type Digit, found %s: %w", subject, ErrValidation)
	}

	if c := checksum(iban); c != iban[2:4] {
		return fmt.Errorf("incorrect checksum: %w", ErrValidation)
	}

	return nil
}

// generateUnitedArabEmiratesIBAN generates United Arab Emirates IBAN
func generateUnitedArabEmiratesIBAN() (string, error) {
	sb := pool.BytesPool.Get()
	defer sb.Free()

	sb.WriteString("AE")
	ascii.Digits(sb, 21)

	return ReplaceChecksum(sb.String())
}

// getUnitedArabEmiratesBBAN retrieves BBAN structure from United Arab Emirates IBAN
func getUnitedArabEmiratesBBAN(iban string) (BBAN, error) {
	if len(iban) != 23 {
		return BBAN{}, fmt.Errorf("unexpected length, want: 23: %w", ErrValidation)
	}

	return BBAN{
		BBAN:             iban[4:23],
		BankCode:         iban[4:7],
		BranchCode:       "",
		NationalChecksum: "",
		AccountNumber:    iban[7:23],
	}, nil
}
