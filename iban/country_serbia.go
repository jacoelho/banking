// Code generated by banking/generator; DO NOT EDIT.

package iban

import (
	"fmt"

	"github.com/jacoelho/banking/ascii"
	"github.com/jacoelho/banking/pool"
)

// ValidateSerbiaIBAN validates Serbia IBAN
func ValidateSerbiaIBAN(iban string) error {
	if len(iban) != 22 {
		return fmt.Errorf("unexpected length, want: 22: %w", ErrValidation)
	}

	if subject := iban[0:2]; subject != "RS" {
		return fmt.Errorf("static value rule, pos: 0, expected value: RS, found %s: %w", subject, ErrValidation)
	}

	if subject := iban[2:22]; !ascii.Every(subject, ascii.IsDigit) {
		return fmt.Errorf("range rule, start pos: 2, length: 20, expected type Digit, found %s: %w", subject, ErrValidation)
	}

	if c := Checksum(iban); c != iban[2:4] {
		return fmt.Errorf("incorrect checksum: %w", ErrValidation)
	}

	return nil
}

// GenerateSerbiaIBAN generates Serbia IBAN
func GenerateSerbiaIBAN() string {
	sb := pool.BytesPool.Get()
	defer sb.Free()

	sb.WriteString("RS")
	generator.Digits(sb, 20)

	return ReplaceChecksum(sb.String())
}

// GetSerbiaBBAN retrieves BBAN structure from Serbia IBAN
func GetSerbiaBBAN(iban string) (BBAN, error) {
	if len(iban) != 22 {
		return BBAN{}, fmt.Errorf("unexpected length, want: 22: %w", ErrValidation)
	}

	return BBAN{
		BBAN:             iban[4:22],
		BankCode:         iban[4:7],
		BranchCode:       "",
		NationalChecksum: iban[20:22],
		AccountNumber:    iban[7:20],
	}, nil
}
